//
// Copyright (c) 2006 Alexis Wilke
//
// Boost Software License - Version 1.0 - August 17th, 2003
// 
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
// Find documentation on the home website:
//
//	http://boost-extras.sourceforge.net/
//	http://boost-extras.sourceforge.net/ini_file/ini_file.html
//
#include	<ini_file.hpp>
#include	<iostream>
#include	<fstream>

// select sample with -DSAMPLE=<1, 2 or 3> on the command line


int main(int argc, char *argv[])
{
#if SAMPLE == 1
	ini_file::section_map ini;

	ini["section1"]["var1"] = "value of var1";
	ini["section1"]["var2"] = "value of var2";
	ini["section2"]["var3"] = "value of var3";
	ini["section2"]["var4"] = "value of var4";

	ini["section1"].set_comment("This is section1 comment");
	ini["section2"].set_comment("This is section2 comment");
	ini["section2"]["var4"].set_comment("This is var4 comment");

	std::cout << ini;
#elif SAMPLE == 2
	ini_file::section_map ini;

	{
		// first we create a file that we can then read
		std::fstream output;
		output.open("test_file.ini", std::fstream::out);
		output << "; This is an auto-generated test file." << std::endl;
		output << "[section1]" << std::endl;
		output << "var1=This is variable ONE" << std::endl;
		output << "var2=This is variable TWO" << std::endl;
		output << "[section2]" << std::endl;
		output << "var3 = \" This is \\\"variable\\\" THREE \" " << std::endl;
		output << "; Comment on variable 4" << std::endl;
		output << "var4=This is variable FOUR" << std::endl;
	} // file closes

	// now try to read it and print out the content
	std::fstream input;
	input.open("test_file.ini", std::fstream::in);

	input >> ini;

	std::cout << "section1 -> " << ini["section1"];
	std::cout << "section1.var1 -> " << ini["section1"]["var1"];
	std::cout << "section1.var2 -> " << ini["section1"]["var2"];
	std::cout << "section2 -> " << ini["section2"];
	std::cout << "section2.var3 -> " << ini["section2"]["var3"];
	std::cout << "section2.var4 -> " << ini["section2"]["var4"];
#elif SAMPLE == 3
	{
		ini_file::section_map s;

		boost::shared_ptr<ini_file::section> sec(new ini_file::section("section1"));
		sec->set_comment("this is a long comment\nwith a new-line");

		boost::shared_ptr<ini_file::param> p(new ini_file::param("var1"));
		p->set_value("this is the value of var1");
		sec->insert(p);

		s.insert(sec);

		sec.reset(new ini_file::section("section2"));
		sec->set_comment("this is yet another long comment\nwith a new-line!!!");

		p.reset(new ini_file::param("var2"));
		p->set_value("this is the value of var2");
		p->set_comment("and v2 has a comment too!\n");
		sec->insert(p);

		s.insert(sec);

		s["section3"]["var3"].set_value("this is variable number three");
		s["section3"]["var4"] = "another variable in section3";


		// test reading parameters values
		std::cout << "section1 -> " << s["section1"];
		std::cout << "section1.var1 -> " << s["section1"]["var1"];
		std::cout << "section2.var2 -> " << s["section2"]["var2"];
		std::cout << "unknown_section = " << const_cast<const ini_file::section_map&>(s)["unknown_section"] << std::endl;

		std::string what = s["section3"]["var4"];
		std::cout << "extracted content of section3.var4 -> " << what << std::endl;

		std::cout << "*********** Output ini file (std::cout << /ini_file::section_map/) ******" << std::endl;
		std::cout << s;
		std::cout << "*****************" << std::endl;
	}
#else
	std::cerr << "error: no -DSAMPLE=<1,2 or 3> was specified when compiling" << std::endl;
#endif

	return 0;
}


// vim: ts=4
