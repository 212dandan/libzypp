<?xml version='1.0' encoding='ISO-8859-1' standalone='yes' ?>
<tagfile>
  <compound kind="file">
    <name>libxmlfwd.cc</name>
    <path>/Local/ma/zypp/libzypp/devel/devel.ma/xml/</path>
    <filename>libxmlfwd_8cc</filename>
    <namespace>zypp</namespace>
    <namespace>zypp::XML</namespace>
    <member kind="define">
      <type>#define</type>
      <name>X</name>
      <anchorfile>libxmlfwd_8cc.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(T)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>X</name>
      <anchorfile>libxmlfwd_8cc.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(T)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacezypp_1_1XML.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(std::ostream &amp;str, const ReadState &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacezypp_1_1XML.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(std::ostream &amp;str, const NodeType &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>libxmlfwd.h</name>
    <path>/Local/ma/zypp/libzypp/devel/devel.ma/xml/</path>
    <filename>libxmlfwd_8h</filename>
    <namespace>zypp</namespace>
    <namespace>zypp::XML</namespace>
    <member kind="typedef">
      <type>xmlTextReaderMode</type>
      <name>ReadState</name>
      <anchorfile>namespacezypp_1_1XML.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>xmlReaderTypes</type>
      <name>NodeType</name>
      <anchorfile>namespacezypp_1_1XML.html</anchorfile>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Node.cc</name>
    <path>/Local/ma/zypp/libzypp/devel/devel.ma/xml/</path>
    <filename>Node_8cc</filename>
    <namespace>zypp</namespace>
    <namespace>zypp::XML</namespace>
    <member kind="define">
      <type>#define</type>
      <name>X</name>
      <anchorfile>Node_8cc.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(m)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Node.h</name>
    <path>/Local/ma/zypp/libzypp/devel/devel.ma/xml/</path>
    <filename>Node_8h</filename>
    <namespace>zypp</namespace>
    <namespace>zypp::XML</namespace>
    <class kind="class">zypp::XML::Node</class>
  </compound>
  <compound kind="file">
    <name>Reader.cc</name>
    <path>/Local/ma/zypp/libzypp/devel/devel.ma/xml/</path>
    <filename>Reader_8cc</filename>
    <namespace>zypp</namespace>
    <namespace>zypp::XML</namespace>
    <member kind="define">
      <type>#define</type>
      <name>X</name>
      <anchorfile>Reader_8cc.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(m)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>XS</name>
      <anchorfile>Reader_8cc.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(m)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>ioread</name>
      <anchorfile>namespacezypp_1_1XML.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(void *context_r, char *buffer_r, int bufferLen_r)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>ioclose</name>
      <anchorfile>namespacezypp_1_1XML.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>structuredErrorFunc</name>
      <anchorfile>namespacezypp_1_1XML.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(void *userData, xmlErrorPtr error)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Reader.h</name>
    <path>/Local/ma/zypp/libzypp/devel/devel.ma/xml/</path>
    <filename>Reader_8h</filename>
    <namespace>zypp</namespace>
    <namespace>zypp::XML</namespace>
    <class kind="struct">zypp::XML::Validate</class>
    <class kind="class">zypp::XML::Reader</class>
  </compound>
  <compound kind="file">
    <name>XmlString.cc</name>
    <path>/Local/ma/zypp/libzypp/devel/devel.ma/xml/</path>
    <filename>XmlString_8cc</filename>
    <namespace>zypp</namespace>
    <namespace>zypp::XML</namespace>
  </compound>
  <compound kind="file">
    <name>XmlString.h</name>
    <path>/Local/ma/zypp/libzypp/devel/devel.ma/xml/</path>
    <filename>XmlString_8h</filename>
    <namespace>zypp</namespace>
    <namespace>zypp::XML</namespace>
    <class kind="class">zypp::XML::XmlString</class>
    <class kind="struct">zypp::XML::XmlString::Deleter</class>
  </compound>
  <compound kind="class">
    <name>zypp::base::NonCopyable</name>
    <filename>classzypp_1_1base_1_1NonCopyable.html</filename>
  </compound>
  <compound kind="class">
    <name>base::SafeBool</name>
    <filename>classbase_1_1SafeBool.html</filename>
  </compound>
  <compound kind="namespace">
    <name>zypp</name>
    <filename>namespacezypp.html</filename>
    <namespace>zypp::XML</namespace>
  </compound>
  <compound kind="namespace">
    <name>zypp::XML</name>
    <filename>namespacezypp_1_1XML.html</filename>
    <class kind="class">zypp::XML::Node</class>
    <class kind="struct">zypp::XML::Validate</class>
    <class kind="class">zypp::XML::Reader</class>
    <class kind="class">zypp::XML::XmlString</class>
    <member kind="typedef">
      <type>xmlTextReaderMode</type>
      <name>ReadState</name>
      <anchorfile>namespacezypp_1_1XML.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>xmlReaderTypes</type>
      <name>NodeType</name>
      <anchorfile>namespacezypp_1_1XML.html</anchorfile>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacezypp_1_1XML.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(std::ostream &amp;str, const ReadState &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacezypp_1_1XML.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(std::ostream &amp;str, const NodeType &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacezypp_1_1XML.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(std::ostream &amp;str, const Node &amp;obj)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>ioread</name>
      <anchorfile>namespacezypp_1_1XML.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(void *context_r, char *buffer_r, int bufferLen_r)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>ioclose</name>
      <anchorfile>namespacezypp_1_1XML.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>structuredErrorFunc</name>
      <anchorfile>namespacezypp_1_1XML.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(void *userData, xmlErrorPtr error)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacezypp_1_1XML.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(std::ostream &amp;str, const XmlString &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>zypp::XML::Node</name>
    <filename>classzypp_1_1XML_1_1Node.html</filename>
    <base protection="private">base::SafeBool</base>
    <member kind="function">
      <type></type>
      <name>Node</name>
      <anchorfile>classzypp_1_1XML_1_1Node.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Node</name>
      <anchorfile>classzypp_1_1XML_1_1Node.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(xmlTextReaderPtr const &amp;reader_r)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>attributeCount</name>
      <anchorfile>classzypp_1_1XML_1_1Node.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>XmlString</type>
      <name>baseUri</name>
      <anchorfile>classzypp_1_1XML_1_1Node.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>columnNumber</name>
      <anchorfile>classzypp_1_1XML_1_1Node.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>depth</name>
      <anchorfile>classzypp_1_1XML_1_1Node.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>XmlString</type>
      <name>encoding</name>
      <anchorfile>classzypp_1_1XML_1_1Node.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>XmlString</type>
      <name>getAttribute</name>
      <anchorfile>classzypp_1_1XML_1_1Node.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const char *name_r) const </arglist>
    </member>
    <member kind="function">
      <type>XmlString</type>
      <name>getAttributeNo</name>
      <anchorfile>classzypp_1_1XML_1_1Node.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(int no_r) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>hasAttributes</name>
      <anchorfile>classzypp_1_1XML_1_1Node.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>hasValue</name>
      <anchorfile>classzypp_1_1XML_1_1Node.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAttribute</name>
      <anchorfile>classzypp_1_1XML_1_1Node.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>isDefault</name>
      <anchorfile>classzypp_1_1XML_1_1Node.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>isEmptyElement</name>
      <anchorfile>classzypp_1_1XML_1_1Node.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>isNamespaceDecl</name>
      <anchorfile>classzypp_1_1XML_1_1Node.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>lineNumber</name>
      <anchorfile>classzypp_1_1XML_1_1Node.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>XmlString</type>
      <name>localName</name>
      <anchorfile>classzypp_1_1XML_1_1Node.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>XmlString</type>
      <name>name</name>
      <anchorfile>classzypp_1_1XML_1_1Node.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>XmlString</type>
      <name>namespaceUri</name>
      <anchorfile>classzypp_1_1XML_1_1Node.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>NodeType</type>
      <name>nodeType</name>
      <anchorfile>classzypp_1_1XML_1_1Node.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>XmlString</type>
      <name>prefix</name>
      <anchorfile>classzypp_1_1XML_1_1Node.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>quoteChar</name>
      <anchorfile>classzypp_1_1XML_1_1Node.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ReadState</type>
      <name>readState</name>
      <anchorfile>classzypp_1_1XML_1_1Node.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>XmlString</type>
      <name>value</name>
      <anchorfile>classzypp_1_1XML_1_1Node.html</anchorfile>
      <anchor>a23</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>XmlString</type>
      <name>xmlLang</name>
      <anchorfile>classzypp_1_1XML_1_1Node.html</anchorfile>
      <anchor>a24</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>XmlString</type>
      <name>xmlVersion</name>
      <anchorfile>classzypp_1_1XML_1_1Node.html</anchorfile>
      <anchor>a25</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>friend</type>
      <name>base::SafeBool</name>
      <anchorfile>classzypp_1_1XML_1_1Node.html</anchorfile>
      <anchor>d0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>boolTest</name>
      <anchorfile>classzypp_1_1XML_1_1Node.html</anchorfile>
      <anchor>d1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>xmlTextReaderPtr const &amp;</type>
      <name>_reader</name>
      <anchorfile>classzypp_1_1XML_1_1Node.html</anchorfile>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static xmlTextReaderPtr const</type>
      <name>_no_reader</name>
      <anchorfile>classzypp_1_1XML_1_1Node.html</anchorfile>
      <anchor>v0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classzypp_1_1XML_1_1Node.html</anchorfile>
      <anchor>m0</anchor>
      <arglist>(std::ostream &amp;str, const Node &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>zypp::XML::Validate</name>
    <filename>structzypp_1_1XML_1_1Validate.html</filename>
    <member kind="function" static="yes">
      <type>static Validate</type>
      <name>none</name>
      <anchorfile>structzypp_1_1XML_1_1Validate.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>zypp::XML::Reader</name>
    <filename>classzypp_1_1XML_1_1Reader.html</filename>
    <base protection="private">zypp::base::NonCopyable</base>
    <member kind="typedef">
      <type>function&lt; bool(Reader &amp;)</type>
      <name>ProcessNode</name>
      <anchorfile>classzypp_1_1XML_1_1Reader.html</anchorfile>
      <anchor>w0</anchor>
      <arglist>)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Reader</name>
      <anchorfile>classzypp_1_1XML_1_1Reader.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const InputStream &amp;stream_r, const Validate &amp;validate_r=Validate::none())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Reader</name>
      <anchorfile>classzypp_1_1XML_1_1Reader.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nextNode</name>
      <anchorfile>classzypp_1_1XML_1_1Reader.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nextNodeAttribute</name>
      <anchorfile>classzypp_1_1XML_1_1Reader.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nextNodeOrAttribute</name>
      <anchorfile>classzypp_1_1XML_1_1Reader.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>atEnd</name>
      <anchorfile>classzypp_1_1XML_1_1Reader.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Node &amp;</type>
      <name>operator *</name>
      <anchorfile>classzypp_1_1XML_1_1Reader.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Node *const</type>
      <name>operator-&gt;</name>
      <anchorfile>classzypp_1_1XML_1_1Reader.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>foreachNode</name>
      <anchorfile>classzypp_1_1XML_1_1Reader.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(ProcessNode fnc_r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>foreachNodeAttribute</name>
      <anchorfile>classzypp_1_1XML_1_1Reader.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(ProcessNode fnc_r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>foreachNodeOrAttribute</name>
      <anchorfile>classzypp_1_1XML_1_1Reader.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(ProcessNode fnc_r)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>close</name>
      <anchorfile>classzypp_1_1XML_1_1Reader.html</anchorfile>
      <anchor>d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>InputStream</type>
      <name>_stream</name>
      <anchorfile>classzypp_1_1XML_1_1Reader.html</anchorfile>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>xmlTextReaderPtr</type>
      <name>_reader</name>
      <anchorfile>classzypp_1_1XML_1_1Reader.html</anchorfile>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Node</type>
      <name>_node</name>
      <anchorfile>classzypp_1_1XML_1_1Reader.html</anchorfile>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>zypp::XML::XmlString</name>
    <filename>classzypp_1_1XML_1_1XmlString.html</filename>
    <member kind="enumeration">
      <name>OnDelete</name>
      <anchor>w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOFREE</name>
      <anchor>w2w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FREE</name>
      <anchor>w2w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>XmlString</name>
      <anchorfile>classzypp_1_1XML_1_1XmlString.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const xmlChar *const xmlstr_r=NULL, OnDelete ondelete_r=NOFREE)</arglist>
    </member>
    <member kind="function">
      <type>const xmlChar *const</type>
      <name>get</name>
      <anchorfile>classzypp_1_1XML_1_1XmlString.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const xmlChar *const</name>
      <anchorfile>classzypp_1_1XML_1_1XmlString.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *const</type>
      <name>c_str</name>
      <anchorfile>classzypp_1_1XML_1_1XmlString.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>asString</name>
      <anchorfile>classzypp_1_1XML_1_1XmlString.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classzypp_1_1XML_1_1XmlString.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const std::string &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classzypp_1_1XML_1_1XmlString.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const std::string &amp;rhs) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>shared_ptr&lt; const xmlChar &gt;</type>
      <name>_xmlstr</name>
      <anchorfile>classzypp_1_1XML_1_1XmlString.html</anchorfile>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classzypp_1_1XML_1_1XmlString.html</anchorfile>
      <anchor>m0</anchor>
      <arglist>(std::ostream &amp;str, const XmlString &amp;obj)</arglist>
    </member>
    <class kind="struct">zypp::XML::XmlString::Deleter</class>
  </compound>
  <compound kind="struct">
    <name>zypp::XML::XmlString::Deleter</name>
    <filename>structzypp_1_1XML_1_1XmlString_1_1Deleter.html</filename>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structzypp_1_1XML_1_1XmlString_1_1Deleter.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const xmlChar *xmlstr_r) const </arglist>
    </member>
  </compound>
</tagfile>
