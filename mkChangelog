#! /bin/bash

function errexit() {
  exec >&2
  echo "Error: $@"
  exit 1
}

function usage() {
  exec >&2
  cat <<EOF
  Usage:
	$(basename $0) [OPTIONS]

  Options:
	-h,-?,--help	This page.

Prepare a new changes file entry preloaded with all commits since the last
changes tag and load it into \$EDITOR (vi). If the version file was changed,
optionally submitt and tag the new changes. Otherwise simply leave the changes
in place.

Don't forgett to push created tags as well: git push --tags

EOF
  exit 1
}

case "$1" in
  -[hH?]*)
    usage
    ;;
  --help)
    usage
    ;;
esac


export LC_ALL=""
export LANG="en"
EDITOR=${EDITOR:-vi}

EMAIL="$(git config --get user.email)"

CHANGESFILE=$(ls package/*.changes)
test -f "$CHANGESFILE" || errexit "No changes file '$CHANGESFILE'"

VERSIONFILE="VERSION.cmake"
test -f "$VERSIONFILE" || errexit "No version file '$VERSIONFILE'"

function getversion() {
  cat "$VERSIONFILE" \
  | awk '
  function getnum() {
    gsub("^[^\"]*\"","")
    gsub("\".*$","")
  }
  /^ *SET *\( *LIBZYPP_MAJOR *"[0-9]+" *\)/       {getnum();major=$0}
  /^ *SET *\( *LIBZYPP_MINOR *"[0-9]+" *\)/       {getnum();minor=$0}
  /^ *SET *\( *LIBZYPP_PATCH *"[0-9]+" *\)/       {getnum();patch=$0}
  /^ *SET *\( *LIBZYPP_COMPATMINOR *"[0-9]+" *\)/ {getnum();compatminor=$0}
  /^# LAST RELEASED:/                             {gsub("^.*RELEASED: *","");gsub(" +$","");gsub(" +\\(.*","");lastrelease=$0}
  END {
    thisrelease = major"."minor"."patch" ("compatminor")"
    gsub(" \\(.*","",lastrelease)
    printf "LAST_RELEASE='%s'\n", lastrelease
    printf "THIS_RELEASE='%s'\n", major"."minor"."patch
    printf "THIS_COMPAT='%s'\n", compatminor
  }
  '
}
# $LAST_RELEASE
# $THIS_RELEASE
# $THIS_COMPAT
eval $(getversion)


function newchangesentry() {
  echo "-------------------------------------------------------------------"
  echo "$(date) - $EMAIL"
  echo ""
  echo "$(git log --no-merges --pretty=format:'- %s' "$LAST_RELEASE"..HEAD | grep -v 'po.tar.bz2')"
  test "$LAST_RELEASE" != "$THIS_RELEASE" && {
    echo "- version $THIS_RELEASE ($THIS_COMPAT)"
  }
  echo ""
}
TMPFILE=$(mktemp)
trap " [ -f \"$TMPFILE\" ] && /bin/rm -f -- \"$TMPFILE\" " 0 1 2 3 13 15
{ newchangesentry; cat $CHANGESFILE; } >$TMPFILE

RES=e
while [ "$RES" == "e" ]; do
  $EDITOR $TMPFILE
  echo
  awk '{print}/^----------/{n=n+1; if ( n == 2 ) exit 0; }' $TMPFILE
  read -n 1 -p "(a)bort, (c)ontinue, (s)ubmitt, (e)dit : " RES
  echo
  echo
  case "$RES" in
    [eE]*)
      RES=e
      ;;
    [cCsS])
      echo "Store new $CHANGESFILE"
      mv $TMPFILE $CHANGESFILE

      test "$RES" == "s" && {
	if [ "$LAST_RELEASE" == "$THIS_RELEASE" ]; then
	  git add "$CHANGESFILE" && git commit -m "changes"
	else
	  echo "Remember new version $THIS_RELEASE in $VERSIONFILE"
	  sed -i "s/^# LAST RELEASED:.*$/# LAST RELEASED: $THIS_RELEASE ($THIS_COMPAT)/" $VERSIONFILE
	  git add "$CHANGESFILE" "$VERSIONFILE" \
	    && git commit -m "changes $THIS_RELEASE" \
	    && git tag -m "tagging $THIS_RELEASE" "$THIS_RELEASE" HEAD
	  echo ""
	  echo "Do not forget to push the commit and the tag: git push --tags"
	  echo ""
	fi
      }
      ;;
    *)
      echo "Leave $CHANGESFILE untouched"
      ;;
  esac
done
